.syntax meta

arg = '$' {'emit_token(1);'}
    | '%' {'emit_token(0);'}
    | 'nl' {'emit("\\n");'}
    | 'cr' {'emit("\\r");'} ;

space = '.space' {'skip_whitespace();'}
      | '\\' {'ignore_whitespace=1;'}
      | '/' {'ignore_whitespace=0;'} ;

output = '{' *( .string {'emit(' $ ');'} | arg ) '}'
       | '<' *( .string {%}  | arg ) '>';

user_token_start = '.token' {'user_token=pos;'};
user_token_end = '.deftoken' {'make_token(user_token);'};
user_token_delim = user_token_start
                 | user_token_end;

user_tokens = '.any(' .number {'read_any_between(' $} ',' {','} .number {$} ')' {');'}
            | '.but(' .number {'read_any_but(' $} ')' {');'}
            | '.eq(' .number {'read_char(' $} ')' {');'};

builtin_tokens = '.id' {'read_id();'}
               | '.number' {'read_number();'}
               | '.string' {'read_string();'};

exp3 = .id {'meta_' $ '();'}
     | .string {'read_literal(' $ ');'}
     | builtin_tokens
     | user_tokens
     | '(' exp1 ')'
     | '.e' {'test_flag=1;'}
     | '*'
       {'do{'} exp3 {'}while(test_flag);'}
       {'test_flag=1;'};

exp2 = ( exp3 {'if(test_flag){'}
       | ( output | space | user_token_delim ) {'if(1){'} )
       *( space | user_token_delim | output
        | exp3 {'error_if_false();'} )
       {'}'};

exp1 = {'do{'} (user_token_start | space | .e) exp2
       *( '|' {'if(test_flag){break;}'} exp2 )
       {'}while(0);'};

stat = .id {'void meta_' $ '(void)'}
       {'{'}
       '=' exp1 ';'
       {'}'};

initialize = '.initialize' *( .string <%> ) ';' | .e;
finalize = '.end' .id {
'
int main(int argc, char *argv[]) {'
  'FILE *input;'
  'int length;'
  'if (argc != 3) {'
    'fprintf(stderr, "usage: meta <input> <output>\\n");'
    'exit(1);'
  '}'
  'input = fopen(argv[1], "r");'
  'if (input == NULL) {'
    'fprintf(stderr, "invalid input file\\n");'
    'exit(1);'
  '}'
  'output_name = argv[2];'
  'output = fopen(output_name, "w");'
  'if (output == NULL) {'
    'fprintf(stderr, "invalid output file\\n");'
    'exit(1);'
  '}'
  'fseek(input, 0, SEEK_END);'
  'length = (int)ftell(input);'
  'fseek(input, 0, SEEK_SET);'
  'source = malloc(length + 1);'
  'fread(source, 1, length, input);'
  'source[length] = \'\\0\';'
  'token = malloc(1);'
  'token[0] = \'\\0\';'
  'meta_'%'();'
  'fprintf(stderr, "%d %d\\n", pos, strlen(source));'
  'return 0;'
'}'}     | '.test' .id {
'
int main (int argc, char *argv[]) {'
  'source = malloc(65535+1);'
  'int chars = read(0,source,65535);'
  'source[chars-1] = \'\\0\';'
  'output = stdout;'
  'token = malloc(1);'
  'token[0] = \'\\0\';'
  'meta_'%'();'
  'return 0;'
'}'}     | '.finalize' *( .string <%> ) ';';

program = '.syntax' .id {'#include "support.h"\nint user_token=0;'}
          initialize
          *stat
          finalize;

.end program
